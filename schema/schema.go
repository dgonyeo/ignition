package schema

// generated by "schematyper --package=schema ignition.json -o schema.go" -- DO NOT EDIT

type ConfigReference struct {
	Source       string `json:"source,omitempty"`
	Verification string `json:"verification,omitempty"`
}

type Device string

type Disk struct {
	Device     string      `json:"device,omitempty"`
	Partitions []Partition `json:"partitions,omitempty"`
	WipeTable  bool        `json:"wipeTable,omitempty"`
}

type Dropin struct {
	Contents string `json:"contents,omitempty"`
	Name     string `json:"name,omitempty"`
}

type File interface{}

type FileContents struct {
	Compression  string `json:"compression,omitempty"`
	Source       string `json:"source,omitempty"`
	Verification string `json:"verification,omitempty"`
}

type Filesystem struct {
	Mount StorageStorageStorageMount `json:"mount,omitempty"`
	Name  string                     `json:"name,omitempty"`
	Path  string                     `json:"path,omitempty"`
}

type Filesystems struct {
	Mount FilesystemsMount `json:"mount,omitempty"`
	Name  string           `json:"name,omitempty"`
	Path  string           `json:"path,omitempty"`
}

type FilesystemsMount struct {
	Create objectFilesystemsMountFilesystemsMountCreate `json:"create,omitempty"`
	Device string                                       `json:"device,omitempty"`
	Format string                                       `json:"format,omitempty"`
}

type FilesystemsMountFilesystemsMountCreate struct {
	Force   bool                                           `json:"force,omitempty"`
	Options []FilesystemsMountFilesystemsMountCreateOption `json:"options,omitempty"`
}

type FilesystemsMountFilesystemsMountCreateOption string

type Ignition struct {
	Filesystems Filesystems     `json:"filesystems,omitempty"`
	Ignition    IgnitionVersion `json:"ignition"`
	Networkd    Networkd        `json:"networkd,omitempty"`
	Passwd      Passwd          `json:"passwd,omitempty"`
	Storage     Storage         `json:"storage,omitempty"`
	Systemd     Systemd         `json:"systemd,omitempty"`
}

type IgnitionConfig struct {
	Append  []ConfigReference `json:"append,omitempty"`
	Replace ConfigReference   `json:"replace,omitempty"`
}

type IgnitionVersion struct {
	Config   IgnitionConfig `json:"config,omitempty"`
	Timeouts Timeouts       `json:"timeouts,omitempty"`
	Version  string         `json:"version,omitempty"`
}

type Networkd struct {
	Units []Networkdunit `json:"units,omitempty"`
}

type Networkdunit struct {
	Contents string `json:"contents,omitempty"`
	Name     string `json:"name,omitempty"`
}

type Node struct {
	Filesystem string                 `json:"filesystem,omitempty"`
	Group      objectNodeGroup        `json:"group,omitempty"`
	Mode       string                 `json:"mode,omitempty"`
	Path       string                 `json:"path,omitempty"`
	User       objectNodeNodeNodeUser `json:"user,omitempty"`
}

type NodeGroup struct {
	ID int `json:"id,omitempty"`
}

type NodeNodeNodeUser struct {
	ID int `json:"id,omitempty"`
}

type Partition struct {
	Label    string `json:"label,omitempty"`
	Number   int    `json:"number,omitempty"`
	Size     int    `json:"size,omitempty"`
	Start    int    `json:"start,omitempty"`
	TypeGUID string `json:"typeGuid,omitempty"`
}

type Passwd struct {
	Groups []PasswdGroup      `json:"groups,omitempty"`
	Users  []PasswdPasswdUser `json:"users,omitempty"`
}

type PasswdGroup struct {
	Gid          int    `json:"gid,omitempty"`
	Name         string `json:"name,omitempty"`
	PasswordHash string `json:"passwordHash,omitempty"`
	System       bool   `json:"system,omitempty"`
}

type PasswdPasswdUser struct {
	Create            Usercreate         `json:"create,omitempty"`
	Name              string             `json:"name,omitempty"`
	PasswordHash      string             `json:"passwordHash,omitempty"`
	SSHAuthorizedKeys []SSHAuthorizedKey `json:"sshAuthorizedKeys,omitempty"`
}

type Raid struct {
	Devices []Device `json:"devices,omitempty"`
	Level   string   `json:"level,omitempty"`
	Name    string   `json:"name,omitempty"`
	Spares  int      `json:"spares,omitempty"`
}

type SSHAuthorizedKey string

type Storage struct {
	Directories []Node       `json:"directories,omitempty"`
	Disks       []Disk       `json:"disks,omitempty"`
	Files       []File       `json:"files,omitempty"`
	Filesystems []Filesystem `json:"filesystems,omitempty"`
	Raid        []Raid       `json:"raid,omitempty"`
}

type StorageStorageStorageMount struct {
	Create objectStorageStorageStorageMountStorageStorageStorageMountStorageStorageStorageMountCreate `json:"create,omitempty"`
	Device string                                                                                     `json:"device,omitempty"`
	Format string                                                                                     `json:"format,omitempty"`
}

type StorageStorageStorageMountStorageStorageStorageMountStorageStorageStorageMountCreate struct {
	Force   bool                                                                                         `json:"force,omitempty"`
	Options []StorageStorageStorageMountStorageStorageStorageMountStorageStorageStorageMountCreateOption `json:"options,omitempty"`
}

type StorageStorageStorageMountStorageStorageStorageMountStorageStorageStorageMountCreateOption string

type Systemd struct {
	Units []Unit `json:"units,omitempty"`
}

type Timeouts struct {
	HTTPResponseHeaders int `json:"httpResponseHeaders,omitempty"`
	HTTPTotal           int `json:"httpTotal,omitempty"`
}

type Unit struct {
	Contents string   `json:"contents,omitempty"`
	Dropins  []Dropin `json:"dropins,omitempty"`
	Enable   bool     `json:"enable,omitempty"`
	Mask     bool     `json:"mask,omitempty"`
	Name     string   `json:"name,omitempty"`
}

type Usercreate struct {
	Gecos        string            `json:"gecos,omitempty"`
	Groups       []UsercreateGroup `json:"groups,omitempty"`
	HomeDir      string            `json:"homeDir,omitempty"`
	NoCreateHome bool              `json:"noCreateHome,omitempty"`
	NoLogInit    bool              `json:"noLogInit,omitempty"`
	NoUserGroup  bool              `json:"noUserGroup,omitempty"`
	PrimaryGroup string            `json:"primaryGroup,omitempty"`
	Shell        string            `json:"shell,omitempty"`
	System       bool              `json:"system,omitempty"`
	UID          int               `json:"uid,omitempty"`
}

type UsercreateGroup string
